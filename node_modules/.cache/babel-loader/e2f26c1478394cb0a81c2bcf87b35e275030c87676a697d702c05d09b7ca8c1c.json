{"ast":null,"code":"import { WebPlugin } from '@capacitor/core';\nexport class StorageWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.group = 'CapacitorStorage';\n  }\n  async configure({\n    group\n  }) {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n  async get(options) {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n    return {\n      value\n    };\n  }\n  async set(options) {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n  async remove(options) {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n  async keys() {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n    return {\n      keys\n    };\n  }\n  async clear() {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n  async migrate() {\n    var _a;\n    const migrated = [];\n    const existing = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n      const {\n        value: currentValue\n      } = await this.get({\n        key\n      });\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({\n          key,\n          value\n        });\n        migrated.push(key);\n      }\n    }\n    return {\n      migrated,\n      existing\n    };\n  }\n  async removeOld() {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n  get impl() {\n    return window.localStorage;\n  }\n  get prefix() {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n  rawKeys() {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n  applyPrefix(key) {\n    return this.prefix + key;\n  }\n}","map":{"version":3,"names":["WebPlugin","StorageWeb","constructor","group","configure","get","options","value","impl","getItem","applyPrefix","key","set","setItem","remove","removeItem","keys","rawKeys","map","k","substring","prefix","length","clear","migrate","migrated","existing","oldprefix","Object","filter","indexOf","oldkey","_a","currentValue","push","removeOld","window","localStorage"],"sources":["C:\\Users\\baaan\\Desktop\\Photogram\\photogramclient\\node_modules\\@capacitor\\storage\\src\\web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  StoragePlugin,\n  ConfigureOptions,\n  GetOptions,\n  GetResult,\n  SetOptions,\n  RemoveOptions,\n  KeysResult,\n  MigrateResult,\n} from './definitions';\n\nexport class StorageWeb extends WebPlugin implements StoragePlugin {\n  private group = 'CapacitorStorage';\n\n  public async configure({ group }: ConfigureOptions): Promise<void> {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n\n  public async get(options: GetOptions): Promise<GetResult> {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n\n    return { value };\n  }\n\n  public async set(options: SetOptions): Promise<void> {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n\n  public async remove(options: RemoveOptions): Promise<void> {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n\n  public async keys(): Promise<KeysResult> {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n\n    return { keys };\n  }\n\n  public async clear(): Promise<void> {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n\n  public async migrate(): Promise<MigrateResult> {\n    const migrated: string[] = [];\n    const existing: string[] = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = this.impl.getItem(oldkey) ?? '';\n      const { value: currentValue } = await this.get({ key });\n\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({ key, value });\n        migrated.push(key);\n      }\n    }\n\n    return { migrated, existing };\n  }\n\n  public async removeOld(): Promise<void> {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n\n  private get impl(): Storage {\n    return window.localStorage;\n  }\n\n  private get prefix(): string {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n\n  private rawKeys(): string[] {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n\n  private applyPrefix(key: string) {\n    return this.prefix + key;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}